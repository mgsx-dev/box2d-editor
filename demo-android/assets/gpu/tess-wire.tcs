#version 410 core

uniform float u_tess_in;
uniform float u_tess_out;


in vec3 normal[];

out float dist[]; 
out vec3 t_normal[];

out struct PhongPatch
{
 float termIJ;
 float termJK;
 float termIK;
}oPhongPatch[];

#define Pi  gl_in[0].gl_Position.xyz
#define Pj  gl_in[1].gl_Position.xyz
#define Pk  gl_in[2].gl_Position.xyz

float PIi(int i, vec3 q)
{
 vec3 q_minus_p = q - gl_in[i].gl_Position.xyz;
 return q[gl_InvocationID] - dot(q_minus_p, normal[i])
                           * normal[i][gl_InvocationID];
}

layout (vertices = 3) out;
void main()
{
	vec4 pos = gl_in[gl_InvocationID].gl_Position;
	float z = pos.z / pos.w;
	
	dist[gl_InvocationID] = z;
	
	t_normal[gl_InvocationID] = normal[gl_InvocationID];
	if(gl_InvocationID == 0)
	{
		float factor = 1.0; //pow(1.0 - z, 2.0);
		
		// each edges
		
		
		gl_TessLevelOuter[0] = u_tess_out * factor;
		gl_TessLevelOuter[1] = u_tess_out * factor;
		gl_TessLevelOuter[2] = u_tess_out * factor;
	 
		gl_TessLevelInner[0] = u_tess_in * factor;
	}
    gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;
    
    oPhongPatch[gl_InvocationID].termIJ = PIi(0,Pj) + PIi(1,Pi);
    oPhongPatch[gl_InvocationID].termJK = PIi(1,Pk) + PIi(2,Pj);
    oPhongPatch[gl_InvocationID].termIK = PIi(2,Pi) + PIi(0,Pk);
	
}
#version 400

uniform mat4 u_projTrans;

uniform float u_offset;

layout(triangles, equal_spacing, ccw) in;

in float dist[];
in vec3 t_normal[];

in struct PhongPatch
{
 float termIJ;
 float termJK;
 float termIK;
} iPhongPatch[];



out float dist2;
out vec3 normal;

#define Pi  (gl_in[0].gl_Position.xyz * gl_in[0].gl_Position.w)
#define Pj  (gl_in[1].gl_Position.xyz * gl_in[1].gl_Position.w)
#define Pk  (gl_in[2].gl_Position.xyz * gl_in[2].gl_Position.w)
#define tc1 gl_TessCoord
#define uTessAlpha u_offset
 
void main()
{ 
	dist2 = (gl_TessCoord.x * dist[0] + gl_TessCoord.y * dist[1] + gl_TessCoord.z * dist[2]) / 3.0;
	normal = normalize(gl_TessCoord.x * t_normal[0] + gl_TessCoord.y * t_normal[1] + gl_TessCoord.z * t_normal[2]);
  
	vec3 tc2 = tc1*tc1;
	
	vec3 barPos = gl_TessCoord[0]*Pi
	             + gl_TessCoord[1]*Pj
	             + gl_TessCoord[2]*Pk;
	
	vec3 termIJ = vec3(iPhongPatch[0].termIJ,
	                    iPhongPatch[1].termIJ,
	                    iPhongPatch[2].termIJ);
	 vec3 termJK = vec3(iPhongPatch[0].termJK,
	                    iPhongPatch[1].termJK,
	                    iPhongPatch[2].termJK);
	 vec3 termIK = vec3(iPhongPatch[0].termIK,
	                    iPhongPatch[1].termIK,
	                    iPhongPatch[2].termIK);
	 
	vec3 phongPos   = tc2[0]*Pi
	                 + tc2[1]*Pj
	                 + tc2[2]*Pk
	                 + tc1[0]*tc1[1]*termIJ
	                 + tc1[1]*tc1[2]*termJK
	                 + tc1[2]*tc1[0]*termIK;
	
	vec3 finalPos = (1.0-uTessAlpha)*barPos + uTessAlpha*phongPos;
	gl_Position   = vec4(finalPos, 1.0);
	
	// gl_Position = gl_in[0].gl_Position * gl_TessCoord.x + gl_in[1].gl_Position * gl_TessCoord.y + gl_in[2].gl_Position * gl_TessCoord.z;
}
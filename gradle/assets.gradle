
def gdxNightliesURL = 'https://libgdx.badlogicgames.com/nightlies/runnables/'
def p3dName = 'runnable-3D-particles.jar'

task gdxP3dDownload() {
	def f = new File(System.getProperty('java.io.tmpdir'), p3dName)
	doLast{
		if (!f.exists()) {
		    new URL(gdxNightliesURL + '/' + p3dName).withInputStream{ i -> f.withOutputStream{ it << i }}
		}
	}
	outputs.upToDateWhen { f.exists() }
}

task gdxP3d(dependsOn: gdxP3dDownload, group: 'gdx') << {
	// ant.java(jar: new File(System.getProperty('java.io.tmpdir'), p3dName), fork:true, dir: "$projectDir/demo-android/assets")
	// Only way to spawn a process without blocking gradle
	
	// TODO Flame doesn't use inputs and working directory ...
	("java -jar " + new File(System.getProperty('java.io.tmpdir'), p3dName)).execute(null, new File("$projectDir/demo-android/assets"))
}

task gdxHieroDownload(type: Exec) {
	def tmpDir = System.getProperty('java.io.tmpdir')
	def tmp = "/tmp/runnable-hiero.jar"
	commandLine 'wget', '-O', tmp, 'https://libgdx.badlogicgames.com/nightlies/runnables/runnable-hiero.jar'
	outputs.upToDateWhen { new File(tmp).exists() }
}

task gdxHiero(type: Exec, dependsOn: gdxHieroDownload, group: 'gdx') {
	def tmp = "/tmp/runnable-hiero.jar"
	commandLine 'java', '-jar', tmp
}

// generate hiero task for any *.hiero in asset folder
fileTree("$projectDir/demo-android/assets") {
    include '**/*.hiero'
}.each {File f ->
    def name = f.name.take(f.name.lastIndexOf('.'))
	task "gdxHiero_${name}"(type: Exec, dependsOn: gdxHieroDownload) {
	  group = "assets"
	  description = "Edit hiero file"
	  commandLine 'java', '-jar', "/tmp/runnable-hiero.jar", '-i', f.toPath() // TODO path
   } 
}


